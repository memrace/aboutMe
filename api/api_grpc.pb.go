// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: api/api.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DialogServiceClient is the client API for DialogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DialogServiceClient interface {
	Get(ctx context.Context, in *GetDialog, opts ...grpc.CallOption) (*Dialog, error)
	Create(ctx context.Context, in *CreateDialog, opts ...grpc.CallOption) (*DialogId, error)
	Delete(ctx context.Context, in *DialogId, opts ...grpc.CallOption) (*Result, error)
	SetReply(ctx context.Context, in *UserReply, opts ...grpc.CallOption) (*Result, error)
}

type dialogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDialogServiceClient(cc grpc.ClientConnInterface) DialogServiceClient {
	return &dialogServiceClient{cc}
}

func (c *dialogServiceClient) Get(ctx context.Context, in *GetDialog, opts ...grpc.CallOption) (*Dialog, error) {
	out := new(Dialog)
	err := c.cc.Invoke(ctx, "/service.DialogService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dialogServiceClient) Create(ctx context.Context, in *CreateDialog, opts ...grpc.CallOption) (*DialogId, error) {
	out := new(DialogId)
	err := c.cc.Invoke(ctx, "/service.DialogService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dialogServiceClient) Delete(ctx context.Context, in *DialogId, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/service.DialogService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dialogServiceClient) SetReply(ctx context.Context, in *UserReply, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/service.DialogService/SetReply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DialogServiceServer is the server API for DialogService service.
// All implementations must embed UnimplementedDialogServiceServer
// for forward compatibility
type DialogServiceServer interface {
	Get(context.Context, *GetDialog) (*Dialog, error)
	Create(context.Context, *CreateDialog) (*DialogId, error)
	Delete(context.Context, *DialogId) (*Result, error)
	SetReply(context.Context, *UserReply) (*Result, error)
	mustEmbedUnimplementedDialogServiceServer()
}

// UnimplementedDialogServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDialogServiceServer struct {
}

func (UnimplementedDialogServiceServer) Get(context.Context, *GetDialog) (*Dialog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDialogServiceServer) Create(context.Context, *CreateDialog) (*DialogId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedDialogServiceServer) Delete(context.Context, *DialogId) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDialogServiceServer) SetReply(context.Context, *UserReply) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetReply not implemented")
}
func (UnimplementedDialogServiceServer) mustEmbedUnimplementedDialogServiceServer() {}

// UnsafeDialogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DialogServiceServer will
// result in compilation errors.
type UnsafeDialogServiceServer interface {
	mustEmbedUnimplementedDialogServiceServer()
}

func RegisterDialogServiceServer(s grpc.ServiceRegistrar, srv DialogServiceServer) {
	s.RegisterService(&DialogService_ServiceDesc, srv)
}

func _DialogService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDialog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialogServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.DialogService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialogServiceServer).Get(ctx, req.(*GetDialog))
	}
	return interceptor(ctx, in, info, handler)
}

func _DialogService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDialog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialogServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.DialogService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialogServiceServer).Create(ctx, req.(*CreateDialog))
	}
	return interceptor(ctx, in, info, handler)
}

func _DialogService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DialogId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialogServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.DialogService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialogServiceServer).Delete(ctx, req.(*DialogId))
	}
	return interceptor(ctx, in, info, handler)
}

func _DialogService_SetReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserReply)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialogServiceServer).SetReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.DialogService/SetReply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialogServiceServer).SetReply(ctx, req.(*UserReply))
	}
	return interceptor(ctx, in, info, handler)
}

// DialogService_ServiceDesc is the grpc.ServiceDesc for DialogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DialogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.DialogService",
	HandlerType: (*DialogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _DialogService_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _DialogService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _DialogService_Delete_Handler,
		},
		{
			MethodName: "SetReply",
			Handler:    _DialogService_SetReply_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}
